local json = import("./json.nlua")
local html = import("./parse_html.nlua")
local util = import("./util.nlua")
local type PageIndex = {[number] = {address = string}}
local type Page = {
	title = string,
	wikiName = string,
	wikiIcon = string,
	wikiUrl = string,
	address = string,
	createdTime = string,
	updateCount = number,
	markup = string,
	html = string,
	footer = string,
	revisionId = number,
	pageLinks = List<|
		{
			url = string,
			label = string,
			icon = string,
			description = string,
		}
	|>,
}

if not util.file_exists("./pages/index.json") then
	util.download("https://wiki.facepunch.com/gmod/~pagelist?format=json", "./pages/index.json")
end

local T = {functions = {}, structures = {}, enums = {}}
local pages = json.decode(util.file_read("./pages/index.json")) as PageIndex

do
	assert(pages[1].address == "")
	table.remove(pages, 1) -- remove the first page which is just the homepage
end

for _, page in ipairs(pages) do
	local url = "https://wiki.facepunch.com/gmod/" .. page.address .. "?format=json"
	local path = "./pages/" .. page.address .. ".json"

	if not util.file_exists(path) then util.download(url, path) end

	local page = json.decode(util.file_read(path)) as Page
	local root = html.parse(page.html)
	local node = html.find_node(root, "class", "")

	if node then
		local class = assert(node.attributes.class, "node has no class attribute")

		if class:sub(1, #"enum") == "enum" then
			local table = assert(html.find_tag(node, "table"))
			local E = {}

			for i, tr in ipairs(table.children) do
				local name = tr.children[1].children[2].children[1].data
				local value = tr.children[2].children[1].data
				local description = html.to_html(tr.children[3])
				E[i] = {
					name = name,
					value = value,
					description = description,
				}
			end

			T.enums[page.address] = E
		elseif class:sub(1, #"function") == "struct" then
			assert(node.children, "node has no children")
			local S = {}

			for i, child in ipairs(node.children) do
				if child.attributes and child.attributes.class == "parameter" then
					local node = child.children[1]
					local name = assert(
						html.select_first_data(node.children[1].children[1]),
						"could not find name: " .. html.to_html(node)
					)
					local type = assert(
						html.select_first_data(node.children[3].children[1]),
						"could not find type: " .. html.to_html(node)
					)
					local description
					local default
					local description_node = html.find_node(child, "class", "description")

					if description_node then
						description = description_node.children[1] and html.to_html(description_node.children[1])
						default = description_node.children[2] and
							description_node.children[2].children[2] and
							description_node.children[2].children[2].data
					end

					S[name] = {type = type, description = description, default = default}
				end
			end

			T.structures[page.address] = S
		elseif class:sub(1, #"function") == "function" then
			local class = assert(node.attributes.class)
			local classes = util.string_split(class, " ")
			table.remove(classes, 1) -- remove function
			local function_type = table.remove(classes, 1) -- remove function
			local realms = classes
			local F = {
				type = function_type,
				realms = realms,
				input = {},
				output = {},
			}

			do
				local node = html.find_node(node, "class", "function_arguments section")

				if node and node.children then
					for i, child in ipairs(node.children) do
						local name = html.select_first_data(html.find_node(child, "class", "name")) or "noname"
						local type = html.select_first_data(html.find_node(child, "class", "link%-page")) or "any"
						local default = html.select_first_data(html.find_node(child, "class", "default")) or "any"
						local description = html.find_node(child, "class", "numbertagindent")
						F.input[i] = {
							name = name,
							type = type,
							default = default,
							description = description and html.to_html(description),
						}
					end
				end
			end

			do
				local node = html.find_node(node, "class", "function_returns section")

				if node and node.children then
					for i, child in ipairs(node.children) do
						local name = html.select_first_data(html.find_node(child, "class", "name")) or "noname"
						local type = html.select_first_data(html.find_node(child, "class", "link%-page")) or "any"
						local description = html.find_node(child, "class", "numbertagindent")
						F.output[i] = {
							name = name,
							type = type,
							description = description and html.to_html(description),
						}
					end
				end
			end

			T.functions[page.address] = F
		end
	end
end

util.file_write("./output.json", json.encode(T))