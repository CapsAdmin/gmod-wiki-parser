local html = import("./util/parse_html.nlua")
local util = import("./util/util.nlua")
local download_wilki_pages = import("./download_wiki_pages.nlua")

local function clean_default(str: nil | string)
	if not str then return end

	str = str:gsub("&%w+;", "")
	str = util.string_trim((str:gsub("=", "")))
	return str
end

local function find_type_from_description(type: string | nil, description: html.Tag | nil, page_link: string)
	if not type or type == "number" or type == "Panel" or type == "table" then
		local anchor = html.find_tag(description, "a")
		local href = anchor and anchor.attributes and anchor.attributes.href

		if href then
			if href:find("/gmod/D.-:") then return type end

			if href == "/gmod/Color" then
				return "Color"
			elseif href == "/gmod/Vector" then
				return "Vector"
			elseif href == "/gmod/Angle" then
				return "Angle"
			elseif href == "/gmod/VMatrix" then
				return "VMatrix"
			elseif href == "/gmod/string" then
				return "string"
			elseif href:find("/gmod/Enums/", nil, true) then
				return "Enum." .. href:sub(#"/gmod/Enums/" + 1)
			elseif href:find("/gmod/Structures", nil, true) then
				return href:sub(#"/gmod/Structures/" + 1)
			elseif href:find("/gmod/D", nil, true) then
				return href:sub(#"/gmod/" + 1)
			elseif href:find("/gmod/") then

			--print("not sure how to resolve generic ", type, " to ", href, " in page ", page_link)
			end
		end
	end

	return type
end

return function(pages: return_type<|download_wilki_pages|>[1])
	local T = {
		libraries = {},
		structures = {PixelVisHandle = {functions = {}, members = {}}},
		enums = {},
	}

	for _, page in ipairs(pages) do
		local root = html.parse(page.html)
		local node = html.find_node(root, "class", "")

		if node then
			local class = assert(node.attributes and node.attributes.class, "node has no class attribute")

			if class:sub(1, #"type") == "type" then
				local section = html.find_node(node, "class", "section")

				if section and section.children then
					local members
					local functions

					for _, child in ipairs(section.children) do
						if child.tag == "table" then
							local th = html.find_tag(child, "^th$")

							if th and html.select_first_data(th) == "Metamethod" then
								functions = html.find_tag(child, "tbody")
							else
								members = html.find_tag(child, "tbody")
							end
						end
					end

					if members and members.children then
						T.structures[page.address] = T.structures[page.address] or {members = {}, functions = {}}

						for _, child in ipairs(members.children) do
							local children = assert(child.children)
							local type = html.to_string(assert(children[1]))
							local name = html.to_string(assert(children[2]))
							local description = assert(children[3])
							type = find_type_from_description(type, description, page.address)

							if name:find(" or ", nil, true) then
								for _, name in ipairs(util.string_split(name, "or")) do
									name = util.string_trim(name)
									T.structures[page.address].members[name] = {
										type = type,
										description = html.to_compact_html(description),
										default = clean_default(default),
									}
								end
							else
								T.structures[page.address].members[name] = {
									type = type,
									description = html.to_compact_html(description),
									default = clean_default(default),
								}
							end
						end
					end

					if functions then
						T.structures[page.address] = T.structures[page.address] or {members = {}, functions = {}}

						for _, child in ipairs(functions.children) do
							local name = html.to_string(child.children[1])
							local type = util.string_trim(html.to_string(child.children[2]))
							local description = child.children[3]
							local ret_type = find_type_from_description(nil, description, page.address)
							T.structures[page.address].functions[name] = {
								input = {
									type = type ~= "" and type or nil,
								},
								output = {type = ret_type or "any"},
								description = html.to_compact_html(description),
								default = clean_default(default),
							}
						end
					end
				end
			elseif class:sub(1, #"enum") == "enum" then
				local table_tag = assert(html.find_tag(node, "table"))
				local E = {}

				for i, tr in ipairs(table_tag.children) do
					local name = tr.children[1].children[2].children[1].data
					local value = tr.children[2].children[1].data
					local description = html.to_compact_html(tr.children[3])

					if name:find(" or ", nil, true) then
						for _, name in ipairs(util.string_split(name, "or")) do
							name = util.string_trim(name)
							table.insert(
								E,
								{
									name = name,
									value = value,
									description = description,
								}
							)
						end
					else
						table.insert(
							E,
							{
								name = name,
								value = value,
								description = description,
							}
						)
					end
				end

				local name = page.address:sub(#"Enums/" + 1)
				T.enums[name] = E
			elseif class:sub(1, #"struct") == "struct" then
				assert(node.children, "node has no children")
				local name = page.address:sub(#"Structures/" + 1)
				local S = T.structures[name] or {members = {}, functions = {}}

				for i, child in ipairs(node.children) do
					if child.attributes and child.attributes.class == "parameter" then
						local name = assert(html.select_first_data(html.find_tag(child, "strong")))
						local type = assert(html.select_first_data(html.find_tag(child, "a")))
						local description
						local default
						local description_node = html.find_node(child, "class", "description")
						type = find_type_from_description(type, description_node, page.address)

						if description_node then
							description = description_node.children[1] and
								html.to_compact_html(description_node.children[1])
							default = description_node.children[2] and
								description_node.children[2].children[2] and
								description_node.children[2].children[2].data
						end

						S.members[name] = {type = type, description = description, default = clean_default(default)}
					end
				end

				T.structures[name] = S
			elseif class:sub(1, #"function") == "function" then
				local classes = util.string_split(class, " ")
				table.remove(classes, 1) -- remove function
				local function_type = table.remove(classes, 1) -- remove function
				local realms = classes
				local F = {
					realms = realms,
					input = {},
					output = {},
				}

				do
					local node = html.find_node(node, "class", "function_arguments section")

					if node and node.children then
						for i, child in ipairs(node.children) do
							local name = html.select_first_data(html.find_node(child, "class", "name"))
							local type = html.select_first_data(html.find_node(child, "class", "link%-page"))
							local default = html.select_first_data(html.find_node(child, "class", "default"))
							local description = html.find_node(child, "class", "numbertagindent")
							type = find_type_from_description(type, description, page.address)

							if name then name = name:gsub("%s+", "_") end

							if type == "vararg" then
								name = "..."
								type = "...any"
							end

							F.input[i] = {
								name = name,
								type = type,
								default = clean_default(default),
								description = description and html.to_compact_html(description),
							}
						end
					end
				end

				do
					local node = html.find_node(node, "class", "function_returns section")

					if node and node.children then
						for i, child in ipairs(node.children) do
							local name = html.select_first_data(html.find_node(child, "class", "name"))
							local type = html.select_first_data(html.find_node(child, "class", "link%-page"))
							local description = html.find_node(child, "class", "numbertagindent")
							type = find_type_from_description(type, description, page.address)

							if type == "vararg" then type = "...any" end

							F.output[i] = {
								name = name,
								type = type,
								description = description and html.to_compact_html(description),
							}
						end
					end
				end

				local group, name = page.address:match("(.-)[%:%.](.*)")

				if not group then
					group = "Global"
					name = page.address
					print(page.address, "has no group")
				end

				if function_type == "panelfield" then
					T.structures[group] = T.structures[group] or {functions = {}, members = {}}
					T.structures[group].members[name] = F.output[1]
				elseif
					function_type == "classfunc" or
					function_type == "panelfunc" or
					function_type == "panelhook" or
					function_type == "hook"
				then
					T.structures[group] = T.structures[group] or {functions = {}, members = {}}
					T.structures[group].functions[name] = F
				else
					T.libraries[group] = T.libraries[group] or {functions = {}, type = function_type}
					T.libraries[group].functions[name] = F
				end
			end
		end
	end

	return T
end